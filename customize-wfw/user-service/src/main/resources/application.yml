spring:
  application:
    # 应用的名称，eureka会把这个名称当成实例名称，若实例名称都一致，则eureka会当作集群处理
    # 以后的服务调用，是通过这个服务名来调用的
    name: user-service
  cloud:
    loadbalancer:
      retry:
        enabled: false

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8000/eureka
  instance:
    instance-id: user-service
    # 配置显示ip地址
    prefer-ip-address: true
    #设置客户端发送心跳给eureka服务器的时间间隔，默认30s
    lease-renewal-interval-in-seconds: 1
    # 若客户端在3s内没有发送心跳给eureka，那么就表示此客户端宕机了, 在eureka进行清理服务时就能把这个服务给剔除了
    # 所以若将此实例关闭，那么在eureka页面中最迟在
    # eureka.server.eviction-interval-timer-in-ms属性的值 + eureka.client.lease-expiration-duration-in-seconds的值
    # 后能看到实例被剔除
    lease-expiration-duration-in-seconds: 3

# 开启feign的hystrix功能
feign:
  hystrix:
    enabled: true

hystrix:
  threadpool:
    limiting: # --> 这是这个配置的key, 在使用@HystrixCommand注解时，若指定了commandKey = "limiting", 那么就会用这里面的属性去配置
      coreSize: 2 # 默认是10
  command:
    # 可以填写服务名，表示这个服务的超时时间为10s
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 10000
    limiting:
      execution:
        isolation:
          thread:
            # timeoutInMilliseconds配置的是commandKey = "limiting"的hystrix超时时间，默认是1s
            # 因为我在api对线程休眠了10s再返回，若不加大超时时间的话，那么就会一直走降级方法，因为
            # 已经超过了默认的超时时间，为了测试限流。那么就需要把这个超时时间加大，看是否线程数
            # 达到上述配置的2时进入降级方法
            timeoutInMilliseconds: 20000

